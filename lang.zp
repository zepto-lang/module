(let ()
  (define (parse-mod str)
    (let* ((lines   (string:split str "\n"))
           (name    (string:trim (string:substitute (car lines) "#lang module" "")))
           (code    (string:trim (string:join (cdr lines) "\n")))
           (code    (cdr (string:parse (++ "(begin " code ")"))))
           (exports (filter ($ (eq? (car %) 'export)) code))
           (exports (reduce ++ [] (map cdr exports)))
           (code    (filter ($ (not (eq? (car %) 'export))) code))
           (env     (current-env)))
      (map ($ (eval % env)) (macro-expand code))
      `((hash:set! *modules* ,name
          ,(make-hash
              (map ($ (cond
                        ((symbol? %)
                          (cons (symbol->string %) `(,(eval %))))
                        ((and (eq? (length %) 3) (eq? :as (cadr %)))
                          (cons (symbol->string (caddr %)) `(,(eval (car %)))))
                        (else
                          (error:from-string (++ "Unknown form in export: "
                                                 (->string %))))))
                   exports))))))
  (zepto:implements-lang parse-mod "module"))
