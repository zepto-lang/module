(define *modules* (make-hash))

(define (import name)
  (if (not (in name #\:))
    (if (hash:contains? *modules* name)
      (*modules* name)
      :no)
    (let* ((fullname (string:split name #\:))
           (module (car fullname))
           (function (cadr fullname)))
      (if (hash:contains? *modules* module)
        (if (hash:contains? (*modules* module) function)
            ((*modules* module) function)
            :no)
        :no))))

(define-syntax module
  (syntax-rules ()
    ((module name (export exports ...) (preface loads ...) x ...)
      (letrec* (x ...)
        (set! *modules*
          (make-hash *modules*
            (make-hash name
              (make-hash
              (map
                (lambda (el) "build the module map"
                  (if (atom? (car el)) 
                    (cons (string:tail (symbol->string (car el))) (cdr el))
                    el))
                (list exports ...))))))))))

(define-syntax module-extend
(syntax-rules ()
  ((module-extend name (export exports ...) (preface loads ...) x ...)
    (letrec* (x ...)
      (begin
        loads ...
        (set! *modules*
          (make-hash *modules*
            (make-hash (*modules* name)
              (make-hash
              (map 
                (lambda (el)
                  (if (atom? (car el)) 
                    (cons (string:tail (symbol->string (car el))) (cdr el))
                    el))
                (list exports ...)))))))))))
