(define *modules* (make-hash))

(define-syntax import
  (syntax-rules ()
    ((import name)
      (let ((_name (if (symbol? 'name) (symbol->string 'name) name)))
        (if (not (in? _name #\:))
          (if (hash:contains? *modules* _name)
            (*modules* _name)
            :no)
          (let* ((fullname (string:split _name #\:))
                 (_module (car fullname))
                 (function (cadr fullname)))
            (if (hash:contains? *modules* _module)
              (if (hash:contains? (*modules* _module) function)
                  ((*modules* _module) function)
                  :no)
              :no)))))))

(define-syntax module
  (syntax-rules ()
    ((module name (export exports ...) x ...)
      (letrec* (x ...)
      (set! *modules*
        (make-hash *modules*
          (make-hash name
            (make-hash
            (map 
              (lambda (el)
                (if (atom? (car el)) 
                  (cons (string:tail (symbol->string (car el))) (cdr el))
                  el))
              (list exports ...))))))))))

(define-syntax module-extend
  (syntax-rules ()
    ((module-extend name (export exports ...) x ...)
      (letrec* (x ...)
      (set! *modules*
        (make-hash *modules*
          (make-hash (*modules* name)
            (make-hash
            (map 
              (lambda (el)
                (if (atom? (car el)) 
                  (cons (string:tail (symbol->string (car el))) (cdr el))
                  el))
              (list exports ...))))))))))
